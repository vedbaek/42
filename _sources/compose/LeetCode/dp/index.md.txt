
# 动态规划

动态规划（Dynamic Programming，简称DP）是一种解决复杂问题的算法思想，它通过将问题分解为子问题，并存储子问题的解来避免重复计算，以提高算法效率。

动态规划通常用于解决具有重叠子问题和最优子结构性质的问题。其中，重叠子问题指的是原问题可以被分解为相同的子问题，而最优子结构指的是原问题的最优解可以由其子问题的最优解推导得出。

动态规划的基本思路如下：
1. 定义问题的状态：将原问题拆解为若干个子问题，并确定每个子问题的状态。
2. 确定状态转移方程：找到子问题之间的关系，建立状态转移方程，将大问题的解表示为小问题的解。
3. 确定边界条件：确定最简单的、不需要进一步拆解的子问题的解，即边界条件。
4. 以自底向上或自顶向下的方式求解子问题：根据状态转移方程和边界条件，通过递推或迭代的方式计算出更大规模的子问题的解，直到解决原问题。

动态规划的优点是可以避免重复计算，通过存储子问题的解来提高效率。然而，动态规划并不适用于所有问题，有时需要权衡空间复杂度和时间复杂度。

经典的动态规划应用包括：
- 背包问题（0/1背包问题、完全背包问题）
- 最长公共子序列（LCS）
- 最短路径问题（如Dijkstra算法、Floyd-Warshall算法）
- 斐波那契数列等

通过运用动态规划，可以将原本复杂的问题转化为一系列简单的子问题，从而高效地求解。

## 动态规划入门题目
```{toctree}
:maxdepth: 1

lc509
lc70
lc62
```

## 背包问题
背包问题是一个经典的组合优化问题，它在计算机科学和运筹学中非常重要。背包问题可以描述为：给定一个固定容量的背包和一组具有不同价值和重量的物品，如何选择物品放入背包中，使得背包中物品的总价值最大化。

背包问题可以分为两种类型：0-1背包问题和无限背包问题。

1. 0-1背包问题：每个物品只能选择放入背包一次或者不放入。对于每个物品，我们都有一个固定的价值和重量。目标是找到最佳的组合，使得背包中的物品总重量不超过背包容量，同时总价值最大化。

2. 无限背包问题：每个物品可以选择放入背包多次或者不放入。与0-1背包问题不同，每个物品的数量没有限制。目标仍然是找到最佳的组合，使得背包中的物品总重量不超过背包容量，同时总价值最大化。

解决背包问题的常见方法是动态规划。基本思想是构建一个二维数组（或矩阵），其中行表示物品，列表示背包容量。通过填充数组中的元素，逐步计算出每个容量下背包中物品的最大价值。最终，在数组右下角的元素中找到最大价值。

背包问题是一个复杂的组合优化问题，可以有多种改进和变体。例如，可以添加限制条件，如物品的数量限制、物品的体积限制等。此外，还可以通过贪心算法、回溯算法和启发式算法等来解决不同类型的背包问题。

背包问题在实际应用中具有广泛的应用，如资源分配、货物装载、投资组合优化等领域。

```{toctree}
:maxdepth: 1

lc416
```

### 最值问题
```{toctree}
:maxdepth: 1

lc322
lc474
lc1049
```

### 组合问题
```{toctree}
:maxdepth: 1

lc518
```


## 参考
[1] 动态规划 https://en.wikipedia.org/wiki/Dynamic_programming