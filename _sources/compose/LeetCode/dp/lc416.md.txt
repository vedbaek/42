# 416. 分割等和子集⭐⭐

![](../../../_static/leetcode/lc416_01.png)

## 分析
1. nums数组大小小于2则没办法分割
2. 所有元素和为奇数也没办法分割
3. 最大元素大于元素和的一半也没办法分割

## 动态规划分解
### 1. 定义状态方程
定义$dp(i, sum_j)$表示从数组$nums$的$0$到$i$子集$\{nums_0, nums_1,\cdots, nums_i\}$中选出一些数字出来，使得这些数字的和刚好为$sum_j$，每个数字只能用一次

$$
0 \le i < nums.size()
$$

$$
0 \le sum_j \le \left\lfloor \frac{1}{2}\sum_{i=1}^{n} \text{nums}[i] \right\rfloor
$$

### 2. 状态转移方程
* 当$nums_i = sum_j$的时候，直接选$nums_i$即可满足条件：

$$
dp(i, sum_j) = true
$$

* 当$nums_i < sum_j$的时候

$$
dp(i, sum_j) = dp(i-1, sum_j - nums_i)
$$

* 当$nums_i > sum_j$的时候

$$
dp(i, sum_j) = dp(i-1, sum_j)
$$


### 3. 初始状态
```{admonition} 分割等和子集初始化魔法
* 目标和：$target = \left\lfloor \frac{1}{2}\sum_{i=1}^{n} \text{nums}[i] \right\rfloor$
* 数组大小：$n = nums.size()$
* 动态规划状态空间大小为：$n \times (target+1)$
* 动态规划空间所有状态都默认初始化为$false$
* 当目标值$sum_j=0$时，

$$
dp(i, 0)=true
$$
```
## 题解
```cpp
bool canPartition(vector<int>& nums) {
    // 只有一个元素没办法划分
    if (nums.size() < 2) {
        return false;
    }

    int sum = std::accumulate(nums.begin(), nums.end(), 0);
    // 元素和为奇数也无法划分
    if (sum % 2 != 0) {
        return false;
    }

    int half = sum / 2;
    vector<vector<bool>> dp(nums.size(), vector<bool>(half + 1, false));
    for (int i = 1; i < nums.size(); i++) {
        for (int j = 0; j <= half; j++) {
            if (nums[i] == j) {
                dp[i][j] = true;
            } else if (nums[i] < j) {
                dp[i][j] = dp[i - 1][j] | dp[i - 1][j - nums[i]];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    return dp[nums.size() - 1][half];
}
```

## 参考
[1] 分割等和子集 https://leetcode.cn/problems/partition-equal-subset-sum/