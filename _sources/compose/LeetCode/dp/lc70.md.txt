# 70. 爬楼梯⭐

![](../../../_static/leetcode/lc70_01.png)

## 分析

### 1. 动态规划分解
* 爬到第$n$个台阶最后一步有两种可能，一种是从第$n-1$往上爬一阶，一种是从第$n-2$往上爬两阶
* 如果最后一步爬一阶，则$dp(n) = dp(n-1)$
* 如果最后一步爬两阶，则$dp(n) = dp(n-2)$
* 如果能分别算出爬到$n-1$和$n-2$层各有几种方式，把它们加起来，就可以得到爬到$n$阶有多少种方式

$$
dp(n) = dp(n-1) + dp(n-2)
$$

```{admonition} 爬楼梯魔法
* 为什么这个等式会成立，这一点其实不太容易理解
* 为什么$dp(n-1)$到$dp(n)$不$+1$，因为这里需要计算的是由几种方式，而不是有几步
* 从$n-2$到$n$明明有两种方式，一种是爬两个一阶，一种是爬一个两阶，如果选择爬一阶就属于$dp(n-1)$的组合范围内了
* 这道题可能用排列组合的方法更容易理解一下
```

### 2. 初始条件迭代

$$
dp(1) = 1
$$

$$
dp(2) = 2
$$


$$
dp(3) = dp(2) + dp(1)
$$


## 题解：动态规划，递归
* 递归方式基本是直接套用公式就可以实现了，缺点明显，$n$过大时（大概超过45）很容易超时
```cpp
int climbStairs(int n) {
    if (n == 1) {
        return 1;
    } else if (n == 2) {
        return 2;
    } else {
        return climbStairs(n - 1) + climbStairs(n - 2);
    }
}
```

## 题解：动态规划，迭代
* 递归写法换成迭代写法，需要中间变量记住最近的两次状态
```cpp
int climbStairs(int n) {
    int dp1 = 0;
    int dp2 = 0;
    int dp = 0;
    for (int i = 1; i <= n; i++) {
        if (i == 1) {
            dp = 1;
        } else if (i == 2) {
            dp = 2;
        } else {
            dp = dp1 + dp2;
        }
        dp1 = dp2;
        dp2 = dp;
    }
    return dp;
}
```

## 题解：排列组合，递归
* 我个人实在无法理解动态规划的数学表达式，直到我从排列组合的思路来写答案
* 这里利用深度优先搜索，尝试求解全部组合
* 递归的方式更容易理解
* 写完发现，和动态规划的答案不能说一摸一样，只能说几乎一样
* 递归会重复计算子问题，很容易超时，这里只能算到$n=44$

```cpp
int climbStairs(int n) {
    int sum = 0;
    deepSearch(n, sum);
    return sum;
}

void deepSearch(int n, int& sum) {
    if (n == 1) {
        sum += 1;
        return;
    } else if (n == 2) {
        sum += 2;
        return;
    }
    // 往前走一步的两种方式
    deepSearch(n - 1, sum);
    deepSearch(n - 2, sum);
}
```

## 参考
[1] 70. 爬楼梯 https://leetcode.cn/problems/climbing-stairs